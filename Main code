import dash
from dash import dcc, html
from dash.dependencies import Input, Output, State
import requests
import pandas as pd
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np

app = dash.Dash(__name__)

# Replace with your OpenWeather API key
API_KEY = "you API key"

def get_weather_data(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()
    return data

def train_weather_model(df):
    X = df[['temp', 'humidity', 'pressure']].values
    y = df['temp'].shift(-1).dropna().values
    X = X[:-1]  # Remove last row to match y length
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

app.layout = html.Div([
    html.H1("AI-Enhanced Weather Dashboard"),
    dcc.Input(id="city-input", type="text", placeholder="Enter city name"),
    html.Button("Submit", id="submit-button"),
    html.Div(id="weather-output"),
    dcc.Graph(id="temperature-graph"),
    html.Div(id="ai-prediction")
])

@app.callback(
    [Output("weather-output", "children"),
     Output("temperature-graph", "figure"),
     Output("ai-prediction", "children")],
    [Input("submit-button", "n_clicks")],
    [State("city-input", "value")]
)
def update_output(n_clicks, city):
    if not city:
        return "Please enter a city name.", {}, ""
    
    try:
        weather_data = get_weather_data(city)
        
        if weather_data["cod"] != "200":
            return f"Error: {weather_data['message']}", {}, ""
        
        current_temp = weather_data["list"][0]["main"]["temp"]
        weather_desc = weather_data["list"][0]["weather"][0]["description"]
        
        df = pd.DataFrame(weather_data["list"])
        df["dt"] = pd.to_datetime(df["dt"], unit="s")
        df["temp"] = df["main"].apply(lambda x: x["temp"])
        df["humidity"] = df["main"].apply(lambda x: x["humidity"])
        df["pressure"] = df["main"].apply(lambda x: x["pressure"])
        
        fig = px.line(df, x="dt", y="temp", title=f"Temperature Forecast for {city}")
        
        model = train_weather_model(df)
        last_data = df[['temp', 'humidity', 'pressure']].iloc[-1].values.reshape(1, -1)
        next_temp_prediction = model.predict(last_data)[0]
        
        return (
            f"Current temperature in {city}: {current_temp}°C, {weather_desc}",
            fig,
            f"AI Temperature Prediction for next timepoint: {next_temp_prediction:.2f}°C"
        )
    except Exception as e:
        return f"An error occurred: {str(e)}", {}, ""

if __name__ == "__main__":
    app.run_server(debug=True)
